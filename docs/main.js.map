{"version":3,"sources":["./src/shared/utils/get-random-int.ts","./src/app/components/interface-to-mock/interface-to-mock.component.ts","./src/app/components/interface-to-mock/interface-to-mock.component.html","./src/environments/environment.ts","./src/app/components/mock-to-interface/mock-to-interface.component.ts","./src/app/components/mock-to-interface/mock-to-interface.component.html","./src/app/services/generator.service.ts","./src/shared/utils/generate-system-name.ts","./src/app/components/additional-interface/components/additional-interface-modal/additional-interface-modal.component.ts","./src/app/components/additional-interface/components/additional-interface-modal/additional-interface-modal.component.html","./src/app/components/interface-input/interface-input.component.html","./src/app/components/interface-input/interface-input.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/components/additional-interface/additional-interface.component.html","./src/app/components/additional-interface/additional-interface.component.ts","./src/app/components/mock-input/mock-input.component.html","./src/app/components/mock-input/mock-input.component.ts","./src/app/components/header/header-content.component.ts","./src/app/components/header/header-content.component.html","./src/app/app.module.ts","./src/app/services/interface-generator.service.ts","./src/shared/enums/primitive-types.enum.ts","./src/shared/enums/additional-value-types.enum.ts","./src/app/services/additional-interface.service.ts","./src/app/services/mock-generator.service.ts","./src/shared/utils/convertToObject.ts","./src/app/app-routing.module.ts","./src/app/components/additional-interface/enums/additional-interface-form-field.enum.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export function getRandomInt(max): number {\n  return Math.floor(Math.random() * max);\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-interface-to-mock',\n  templateUrl: './interface-to-mock.component.html',\n  styleUrls: ['./interface-to-mock.component.scss'],\n})\nexport class InterfaceToMockComponent {}\n","<div>\n  <div class=\"input-areas\">\n    <app-interface-input></app-interface-input>\n    <app-mock-input></app-mock-input>\n  </div>\n</div>\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-mock-to-interface',\n  templateUrl: './mock-to-interface.component.html',\n  styleUrls: ['./mock-to-interface.component.scss'],\n})\nexport class MockToInterfaceComponent {}\n","<div>\n  <div class=\"input-areas\">\n    <app-mock-input [isInterfaceToMockMode]=\"false\"></app-mock-input>\n    <app-interface-input [isInterfaceToMockMode]=\"false\"></app-interface-input>\n  </div>\n</div>\n\n","import { Injectable } from '@angular/core';\nimport { MockGeneratorService } from './mock-generator.service';\nimport { InterfaceGeneratorService } from './interface-generator.service';\n\n@Injectable()\nexport class GeneratorService {\n  constructor(public mockGeneratorService: MockGeneratorService, public interfaceGeneratorService: InterfaceGeneratorService) { }\n\n  generate(isInterfaceToMockMode: boolean) {\n    if (isInterfaceToMockMode) {\n      this.mockGeneratorService.generateMock();\n    } else {\n      this.interfaceGeneratorService.generateInterface();\n    }\n  }\n}\n","export function generateSystemName(): string {\n  return 'xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\n    const random: number = Math.round(Math.random() * 16);\n    const value: number = c === 'x' ? random : (random && 0x3) || 0x8;\n\n    return value.toString(16);\n  });\n}\n","import { AfterViewInit, Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AdditionalInterfaceService } from '../../../../services/additional-interface.service';\nimport { AdditionalInterfaceFormField } from '../../enums/additional-interface-form-field.enum';\n\n@Component({\n  selector: 'app-additional-interface-modal',\n  templateUrl: './additional-interface-modal.component.html',\n  styleUrls: ['./additional-interface-modal.component.scss'],\n})\nexport class AdditionalInterfaceModalComponent implements AfterViewInit {\n  typeOptions = ['Interface', 'Enum'];\n  formField = AdditionalInterfaceFormField;\n\n  formGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n    value: new FormControl(null, Validators.required),\n    type: new FormControl(null, Validators.required),\n  });\n\n  constructor(private additionalInterfaceService: AdditionalInterfaceService) {}\n\n  ngAfterViewInit() {\n    this.formGroup.reset();\n  }\n\n  save() {\n    this.additionalInterfaceService.saveAdditionalValue(this.formGroup.getRawValue());\n    this.close();\n  }\n\n  close() {\n    document.getElementById('close-btn').click();\n  }\n}\n","<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Add additional interface</h5>\n      <button type=\"button\" id=\"close-btn\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n    </div>\n\n    <div class=\"modal-body\">\n      <label>Type</label>\n      <select class=\"modal-control form-control\" [formControl]=\"formGroup.get(formField.Type)\">\n        <option *ngFor=\"let option of typeOptions\">{{option}}</option>\n      </select>\n\n      <label>Name</label>\n      <input class=\"modal-control form-control\" [formControl]=\"formGroup.get(formField.Name)\">\n\n      <label>Interface</label>\n      <textarea class=\"modal-control form-control\" [formControl]=\"formGroup.get(formField.Value)\"></textarea>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\" (click)='close()'>Close</button>\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"formGroup.invalid\">Save changes</button>\n    </div>\n  </div>\n</div>\n","<div class=\"interface-input-container\">\n  <p class='input-name'>INTERFACE</p>\n\n  <textarea\n    class=\"default-input form-control\"\n    *ngIf=\"isInterfaceToMockMode\"\n    [formControl]=\"mockGeneratorService.interfaceControl\"\n  ></textarea>\n\n  <pre\n    class=\"default-input form-control\"\n    *ngIf=\"!isInterfaceToMockMode\"\n    contenteditable=\"true\"\n  >{{ interfaceGeneratorService.json | json }}</pre>\n\n  <app-additional-interface *ngIf=\"isInterfaceToMockMode\"></app-additional-interface>\n\n  <button\n    class=\"btn btn-primary generate-btn\"\n    (click)=\"generatorService.generate(isInterfaceToMockMode)\"\n    *ngIf=\"!isInterfaceToMockMode\"\n  >Generate</button>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { MockGeneratorService } from '../../services/mock-generator.service';\nimport { InterfaceGeneratorService } from '../../services/interface-generator.service';\nimport { GeneratorService } from '../../services/generator.service';\n\n@Component({\n  selector: 'app-interface-input',\n  templateUrl: './interface-input.component.html',\n  styleUrls: ['./interface-input.component.scss'],\n})\nexport class InterfaceInputComponent {\n  @Input() isInterfaceToMockMode = true;\n\n  constructor(\n    public mockGeneratorService: MockGeneratorService,\n    public interfaceGeneratorService: InterfaceGeneratorService,\n    public generatorService: GeneratorService,\n  ) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'ts-mock-generator';\n}\n","<app-header-content></app-header-content>\n","<div class='additional-interfaces'>\n\n  <button class=\"btn btn-link btn-sm\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n    <span class=\"title\">+ Add additional data</span>\n  </button>\n\n  <div class=\"interface\" *ngFor=\"let interface of additionalInterfaceService.additionalValues; trackBy: identify; let i = index \">\n\n    <mat-expansion-panel hideToggle>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <span [title]=\"interface.type\" class=\"title\">{{interface.name}}</span>\n        </mat-panel-title>\n\n        <mat-panel-description>\n          <mat-icon class=\"delete-button\" (click)=\"additionalInterfaceService.remove(element.value)\">delete_outline\n          </mat-icon>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <label>Type</label>\n      <input class=\"interface-name form-control\" [value]=\"interface.type\" disabled>\n\n      <label>Name</label>\n      <input #element class=\"interface-name form-control\" [value]=\"interface.name\" disabled>\n\n      <label>{{interface.type}}</label>\n      <textarea class=\"interface-value form-control\" [value]=\"interface.value\" disabled></textarea>\n    </mat-expansion-panel>\n  </div>\n\n  <app-additional-interface-modal\n    class=\"modal fade\"\n    id=\"exampleModal\"\n  ></app-additional-interface-modal>\n</div>\n","import { Component } from '@angular/core';\nimport { AdditionalInterfaceService } from '../../services/additional-interface.service';\n\n@Component({\n  selector: 'app-additional-interface',\n  templateUrl: './additional-interface.component.html',\n  styleUrls: ['./additional-interface.component.scss'],\n})\nexport class AdditionalInterfaceComponent {\n  constructor(public additionalInterfaceService: AdditionalInterfaceService) { }\n\n  identify(index: number): number {\n    return index;\n  }\n}\n","<div class=\"mock-input-container\">\n  <p class='input-name'>MOCK</p>\n\n  <textarea\n    class=\"default-input form-control\"\n    *ngIf=\"!isInterfaceToMockMode\"\n    [formControl]=\"interfaceGeneratorService.mockControl\"\n  ></textarea>\n\n  <pre\n    class=\"default-input form-control\"\n    contenteditable=\"true\"\n    *ngIf=\"isInterfaceToMockMode\"\n  >{{ this.mockGeneratorService.json | json }}</pre>\n\n  <button\n    class=\"btn btn-primary generate-btn\"\n    (click)=\"generatorService.generate(isInterfaceToMockMode)\"\n    *ngIf=\"isInterfaceToMockMode\"\n  >Generate</button>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { MockGeneratorService } from '../../services/mock-generator.service';\nimport { InterfaceGeneratorService } from '../../services/interface-generator.service';\nimport { GeneratorService } from '../../services/generator.service';\n\n@Component({\n  selector: 'app-mock-input',\n  templateUrl: './mock-input.component.html',\n  styleUrls: ['./mock-input.component.scss'],\n})\nexport class MockInputComponent {\n  @Input() isInterfaceToMockMode = true;\n\n  constructor(\n    public mockGeneratorService: MockGeneratorService,\n    public interfaceGeneratorService: InterfaceGeneratorService,\n    public generatorService: GeneratorService,\n  ) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header-content',\n  templateUrl: './header-content.component.html',\n  styleUrls: ['./header-content.component.scss'],\n})\nexport class HeaderContentComponent {}\n","<div>\n  <mat-tab-group>\n    <mat-tab [label]=\"'Interface to Mock'\">\n      <app-interface-to-mock></app-interface-to-mock>\n    </mat-tab>\n\n    <mat-tab [label]=\"'Mock to Interface'\">\n      <app-mock-to-interface></app-mock-to-interface>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { InterfaceToMockComponent } from './components/interface-to-mock/interface-to-mock.component';\nimport { MockGeneratorService } from './services/mock-generator.service';\nimport { AdditionalInterfaceComponent } from './components/additional-interface/additional-interface.component';\nimport { AdditionalInterfaceModalComponent } from './components/additional-interface/components/additional-interface-modal/additional-interface-modal.component';\nimport { AdditionalInterfaceService } from './services/additional-interface.service';\nimport { HeaderContentComponent } from './components/header/header-content.component';\nimport { InterfaceInputComponent } from './components/interface-input/interface-input.component';\nimport { MockInputComponent } from './components/mock-input/mock-input.component';\nimport { MockToInterfaceComponent } from './components/mock-to-interface/mock-to-interface.component';\nimport { InterfaceGeneratorService } from './services/interface-generator.service';\nimport { GeneratorService } from './services/generator.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InterfaceToMockComponent,\n    AdditionalInterfaceComponent,\n    AdditionalInterfaceModalComponent,\n    HeaderContentComponent,\n    InterfaceInputComponent,\n    MockInputComponent,\n    MockToInterfaceComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    NgSelectModule,\n    MatExpansionModule,\n    BrowserAnimationsModule,\n    MatIconModule,\n    MatTabsModule,\n  ],\n  providers: [MockGeneratorService, AdditionalInterfaceService, InterfaceGeneratorService, GeneratorService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { convertToObject } from '../../shared/utils/convertToObject';\n\n@Injectable()\nexport class InterfaceGeneratorService {\n  interfaceControl = new FormControl(JSON.stringify({}), Validators.required);\n\n  mockControl = new FormControl('', Validators.required);\n\n  get json() {\n    return JSON.parse(this.interfaceControl.value);\n  }\n\n  generateInterface() {\n    Object.keys(convertToObject(this.mockControl.value)).map((key) => {\n      this.setInterface(this.getUpdatedInterface(key));\n    });\n  }\n\n  getUpdatedInterface(key: string) {\n    const currentInterface = JSON.parse(this.interfaceControl.value);\n    currentInterface[key] = typeof convertToObject(this.mockControl.value)[key];\n\n    return currentInterface;\n  }\n\n  setInterface<T>(currentInterface: T) {\n    this.interfaceControl.reset();\n    this.interfaceControl.setValue(JSON.stringify(currentInterface));\n  }\n}\n","export enum PrimitiveTypes {\n  String = 'string',\n  Number = 'number',\n  Boolean = 'boolean',\n}\n","export enum AdditionalValueTypes {\n  Interface = 'Interface',\n  Enum = 'Enum',\n}\n","import { Injectable } from '@angular/core';\nimport { InterfaceStructure } from '../../shared/interfaces/interface-structure';\n\n@Injectable()\nexport class AdditionalInterfaceService {\n  additionalValues: InterfaceStructure[] = [];\n\n  saveAdditionalValue({ name, value, type }: InterfaceStructure) {\n    this.additionalValues = [\n      ...this.additionalValues,\n      { name, value, type },\n    ];\n  }\n\n  remove(name: string) {\n    this.additionalValues.find((item: InterfaceStructure, index) => {\n      if (item.name === name) {\n        this.additionalValues.splice(index, 1);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { convertToObject } from '../../shared/utils/convertToObject';\nimport { generateSystemName } from '../../shared/utils/generate-system-name';\nimport { PrimitiveTypes } from '../../shared/enums/primitive-types.enum';\nimport { getRandomInt } from '../../shared/utils/get-random-int';\nimport { AdditionalInterfaceService } from './additional-interface.service';\nimport { AdditionalValueTypes } from '../../shared/enums/additional-value-types.enum';\n\ntype PrimitiveType = string | number | boolean;\n\n@Injectable()\nexport class MockGeneratorService {\n  interfaceControl = new FormControl(null, Validators.required);\n\n  mockControl = new FormControl(JSON.stringify({}), Validators.required);\n\n  constructor(private additionalInterfaceService: AdditionalInterfaceService) {}\n\n  get json() {\n    return JSON.parse(this.mockControl.value);\n  }\n\n  generateMock() {\n    this.mockControl.setValue(JSON.stringify({}));\n\n    Object.keys(convertToObject(this.interfaceControl.value)).map((key) => this.generateMockValue(\n      convertToObject(this.interfaceControl.value)[key],\n      key,\n    ));\n  }\n\n  private generateMockValue(type: string, key: string) {\n    const currentMock = JSON.parse(this.mockControl.value);\n\n    this.setMock(currentMock, key, this.getMockValue(type, key));\n  }\n\n  private setMock<T, S>(currentMock: T, mockKey: string, mockValue: S) {\n    currentMock[mockKey] = mockValue;\n\n    this.mockControl.setValue(JSON.stringify(currentMock));\n  }\n\n  private isSystemName(key: string): boolean {\n    return key.includes('systemName') || key.includes('SystemName');\n  }\n\n  private isPrimitive(type: string) {\n    return (\n      type === PrimitiveTypes.String\n      || type === PrimitiveTypes.Number\n      || type === PrimitiveTypes.Boolean\n    );\n  }\n\n  private getMockValue(type: string, key: string) {\n    switch (true) {\n      case this.isSystemName(key):\n        return generateSystemName();\n\n      case this.isInterface(type):\n        return this.getValueByInterface(type);\n\n      case this.isEnum(type):\n        return this.getValueByEnum(type);\n\n      case this.isPrimitive(type):\n        return this.getValueByType(type);\n\n      default:\n        return null;\n    }\n  }\n\n  private getValueByType(type: string): PrimitiveType {\n    switch (type) {\n      case PrimitiveTypes.String: {\n        return 'test string';\n      }\n      case PrimitiveTypes.Number: {\n        return getRandomInt(20);\n      }\n      case PrimitiveTypes.Boolean: {\n        return !!getRandomInt(2);\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  private getValueByInterface(interfaceName: string) {\n    let additionalInterface = {};\n\n    return Object.keys(this.getProcessedInterface(interfaceName))\n      .map(\n        (key: string) => {\n          additionalInterface = {\n            ...additionalInterface,\n            [key]: this.getMockValue(\n              this.getProcessedInterface(interfaceName)[key],\n              key,\n            ),\n          };\n\n          return additionalInterface;\n        },\n      )\n      .pop();\n  }\n\n  private getProcessedInterface(interfaceName: string) {\n    return convertToObject(\n      this.additionalInterfaceService.additionalValues.find(\n        ({ name }) => name === interfaceName,\n      ).value,\n    );\n  }\n\n  private getValueByEnum(enumName: string) {\n    const processedEnum = this.getProcessedEnum(enumName);\n    const firstEnumKey = Object.keys(processedEnum)[0];\n\n    return processedEnum[firstEnumKey];\n  }\n\n  private getProcessedEnum(enumName: string) {\n    return convertToObject(\n      this.additionalInterfaceService.additionalValues.find(\n        ({ name }) => name === enumName,\n      ).value,\n    );\n  }\n\n  private isInterface(interfaceName): boolean {\n    return Boolean(\n      this.additionalInterfaceService.additionalValues.find(\n        ({ name, type }) => name === interfaceName && type === AdditionalValueTypes.Interface,\n      ),\n    );\n  }\n\n  private isEnum(enumName): boolean {\n    return Boolean(\n      this.additionalInterfaceService.additionalValues.find(\n        ({ name, type }) => name === enumName && type === AdditionalValueTypes.Enum,\n      ),\n    );\n  }\n}\n","export function convertToObject(data: string) {\n  const json = data.replace(/\\s/g, '')\n    .replace(/\\n/g, '')\n    .replace(/\\?/g, '')\n    .replace(/=/g, ':')\n    .replace(/\\|/g, '')\n    .replace(/undefined/g, '')\n    .replace(/;(?=})/g, '')\n    .replace(/,(?=})/g, '')\n    .replace(/;/g, ',')\n    .replace('export default', '')\n    .replace(/(\\r\\n|\\n|\\r)/gm, '')\n    .replace(/ /g, '')\n    .replace(/\"/g, '')\n    .replace(/'/g, '')\n    .replace(/{/g, '{\"')\n    .replace(/}/g, '\"}')\n    .replace(/:/g, '\":\"')\n    .replace(/,/g, '\",\"')\n    .replace(/:\"{/g, ':{')\n    .replace(/}\"}/g, '}}')\n    .replace(/}\",\"{/g, '},{')\n    .replace(/]\"}/g, ']}')\n    .replace(/:\"\\[/g, ':[\"')\n    .replace(/]\",/g, '],')\n    .replace(/],/g, '\"],')\n    .replace(/]}/g, '\"]}')\n    .replace(/\\(/g, '(\"')\n    .replace(/\\)/g, '\")')\n    .replace(/\"{/g, '{')\n    .replace(/}\"/g, '}');\n  const obj = JSON.parse(json);\n  Object.keys(obj).forEach((k) => {\n    const int = parseInt(obj[k], 10);\n    if (!Number.isNaN(int) && typeof (obj[k]) !== 'object') {\n      obj[k] = int;\n    }\n  });\n  return obj;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n","export enum AdditionalInterfaceFormField {\n  Name = 'name',\n  Type = 'type',\n  Value = 'value',\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  // eslint-disable-next-line no-console\n  .catch((err) => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}